{"/home/travis/build/npmtest/node-npmtest-promised-mongo/test.js":"/* istanbul instrument in package npmtest_promised_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/lib.npmtest_promised_mongo.js":"/* istanbul instrument in package npmtest_promised_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_promised_mongo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_promised_mongo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-promised-mongo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_promised_mongo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_promised_mongo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_promised_mongo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_promised_mongo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_promised_mongo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_promised_mongo.__dirname + '/lib.npmtest_promised_mongo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/node_modules/promised-mongo/index.js":"var Database = require('./dist/Database');\nvar Collection = require('./dist/Collection');\nvar mongodb = require('mongodb-core');\nvar coreJs = require('babel-runtime/core-js').default;\n\nvar ES2015Proxy = null;\n\nif (typeof Proxy !== 'undefined') {\n  ES2015Proxy = require('harmony-proxy');\n}\n\n\nfunction createDatabase(connectionString, options, collections) {\n  var db = new Database(connectionString, options, collections);\n\n  db.ObjectId = mongodb.BSON.ObjectId;\n  db.DBRef = mongodb.BSON.DBRef;\n  db.Timestamp = mongodb.BSON.Timestamp;\n  db.MinKey = mongodb.BSON.MinKey;\n  db.MaxKey = mongodb.BSON.MaxKey;\n  db.NumberLong = mongodb.BSON.Long;\n\n  var ret;\n\n  if (ES2015Proxy) {\n    ret = new ES2015Proxy(db, {\n      get: function (target, property) {\n        if (target[property]) {\n          return target[property];\n        } else {\n          return target[property] = target.collection(property);\n        }\n      }\n    });\n  } else {\n    ret = db;\n  }\n\n  return ret;\n}\n\n\nmodule.exports = createDatabase;\n\ncreateDatabase.compatible = function () {\n  coreJs.Promise.prototype.done = function (resolve, reject) {\n    this.then(\n      function (result) {\n        try {\n          if (resolve) {\n            resolve(result);\n          }\n        } catch (err) {\n          process.nextTick(function () { throw err; });\n        }\n      },\n      function (err) {\n        if (reject) {\n          reject(err);\n        } else {\n          process.nextTick(function () { throw err; });\n        }\n      });\n  };\n\n  coreJs.Promise.prototype.fail = coreJs.Promise.prototype.catch;\n\n  coreJs.Promise.prototype.fin = coreJs.Promise.prototype.finally = function (callback) {\n      return this.then(callback, function (err) { callback(); throw err; });\n  };\n\n  var findAndModify = Collection.prototype.findAndModify;\n  Collection.prototype.findAndModifyEx = findAndModify;\n\n  Collection.prototype.findAndModify = function () {\n    return findAndModify.apply(this, Array.prototype.slice.call(arguments))\n      .then(function (result) {\n        return result.result;\n      });\n  };\n\n  Database.prototype.db = Database.prototype.getSiblingDb;\n\n  return this;\n};\n\n\ncreateDatabase.ObjectId = mongodb.BSON.ObjectId;\ncreateDatabase.DBRef = mongodb.BSON.DBRef;\ncreateDatabase.Timestamp = mongodb.BSON.Timestamp;\ncreateDatabase.MinKey = mongodb.BSON.MinKey;\ncreateDatabase.MaxKey = mongodb.BSON.MaxKey;\ncreateDatabase.NumberLong = mongodb.BSON.Long;\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/node_modules/promised-mongo/dist/Database.js":"'use strict';\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _regeneratorRuntime = require('babel-runtime/regenerator')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _mongodbCore = require('mongodb-core');\n\nvar _mongodbCore2 = _interopRequireDefault(_mongodbCore);\n\nvar _parseMongoUrl = require('parse-mongo-url');\n\nvar _parseMongoUrl2 = _interopRequireDefault(_parseMongoUrl);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _Collection = require('./Collection');\n\nvar _Collection2 = _interopRequireDefault(_Collection);\n\nvar _Cursor = require('./Cursor');\n\nvar _Cursor2 = _interopRequireDefault(_Cursor);\n\nvar Server = _mongodbCore2['default'].Server;\nvar ReplSet = _mongodbCore2['default'].ReplSet;\nvar MongoCR = _mongodbCore2['default'].MongoCR;\n\nvar Database = (function () {\n  function Database(connectionString, options, collections) {\n    _classCallCheck(this, Database);\n\n    var self = this;\n\n    if (Array.isArray(options)) {\n      collections = options;\n      options = {};\n    }\n\n    self.options = options || {};\n\n    if (typeof connectionString === 'string') {\n      self.config = (0, _parseMongoUrl2['default'])(connectionString);\n    } else {\n      self.config = connectionString;\n    }\n\n    var db_options = self.config.db_options;\n    var writeConcern = { w: 1 };\n\n    if (db_options) {\n      writeConcern = _lodash2['default'].pick(db_options, ['w', 'j', 'fsync', 'wtimeout']);\n\n      if (!writeConcern.w) {\n        writeConcern.w = 1;\n      }\n    }\n\n    _Object$defineProperty(self, 'writeConcern', {\n      writable: false,\n      value: writeConcern\n    });\n\n    if (collections) {\n      collections.forEach(function (collection) {\n        self[collection] = self.collection(collection);\n\n        // set up members to enable db.foo.bar.collection\n        var parts = collection.split('.');\n        var last = parts.pop();\n        var parent = parts.reduce(function (parent, currentPart) {\n          return parent[currentPart] = parent[currentPart] || {};\n        }, self);\n\n        parent[last] = self.collection(last);\n      });\n    }\n  }\n\n  _createClass(Database, [{\n    key: 'addUser',\n    value: function addUser(user) {\n      return _regeneratorRuntime.async(function addUser$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(createUser(user));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'close',\n    value: function close() {\n      var self;\n      return _regeneratorRuntime.async(function close$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            self = this;\n\n            if (!self._serverPromise) {\n              context$2$0.next = 6;\n              break;\n            }\n\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(self._serverPromise);\n\n          case 4:\n            context$2$0.sent.destroy();\n\n            self._serverPromise = null;\n\n          case 6:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'collection',\n    value: function collection(collectionName) {\n      return new _Collection2['default'](this, collectionName);\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      var self = this;\n\n      // only connect once\n      if (self._serverPromise) {\n        return self._serverPromise;\n      } else {\n        return self._serverPromise = new _bluebird2['default'](function (resolve, reject) {\n          var options = null,\n              server = null;\n          var config = self.config;\n\n          // create server connection for single server or replica set\n          if (config.servers.length === 1) {\n            options = config.server_options;\n            options.host = config.servers[0].host || 'localhost';\n            options.port = config.servers[0].port || 27017;\n            options.reconnect = true;\n            options.reconnectInterval = 50;\n            // values specified in self.options override everything else\n            options = _lodash2['default'].extend({}, options, self.options);\n            server = new Server(options);\n          } else {\n            options = config.rs_options;\n            options.setName = options.rs_name;\n            options.reconnect = true;\n            options.reconnectInterval = 50;\n            options = _lodash2['default'].extend({}, options, self.options);\n            server = new ReplSet(config.servers, options);\n          }\n\n          if (config.auth) {\n            server.addAuthProvider('mongocr', new MongoCR());\n            // authenticate on connect\n            server.on('connect', function (server) {\n              server.auth('mongocr', config.dbName, config.auth.user, config.auth.password, function (error, server) {\n                if (error) {\n                  reject(error);\n                } else {\n                  resolve(server);\n                }\n              });\n            });\n          } else {\n            server.on('connect', function (server) {\n              resolve(server);\n            });\n          }\n\n          server.on('error', function (error) {\n            reject(error);\n          });\n\n          server.on('timeout', function (error) {\n            reject(error);\n          });\n\n          server.connect();\n        });\n      }\n    }\n  }, {\n    key: 'createCollection',\n    value: function createCollection(name, options) {\n      var cmd;\n      return _regeneratorRuntime.async(function createCollection$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            cmd = _lodash2['default'].extend({ create: name }, options || {});\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.runCommand(cmd));\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'createUser',\n    value: function createUser(user) {\n      var cmd;\n      return _regeneratorRuntime.async(function createUser$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (!(typeof user !== 'object')) {\n              context$2$0.next = 2;\n              break;\n            }\n\n            throw new Error('user param should be an object');\n\n          case 2:\n            cmd = _lodash2['default'].extend({ createUser: user.user }, user);\n\n            delete cmd.user;\n            context$2$0.next = 6;\n            return _regeneratorRuntime.awrap(this.runCommand(cmd));\n\n          case 6:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 7:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'dropDatabase',\n    value: function dropDatabase() {\n      return _regeneratorRuntime.async(function dropDatabase$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('dropDatabase'));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'dropUser',\n    value: function dropUser(username) {\n      return _regeneratorRuntime.async(function dropUser$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand({ dropUser: username }));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getCollectionNames',\n    value: function getCollectionNames() {\n      var collection, names;\n      return _regeneratorRuntime.async(function getCollectionNames$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            collection = this.collection('system.namespaces');\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(collection.find({ name: /^((?!\\$).)*$/ }).toArray());\n\n          case 3:\n            names = context$2$0.sent;\n            return context$2$0.abrupt('return', names.map(function (name) {\n              // trim dbname from front of collection name\n              return name.name.substr(name.name.indexOf('.') + 1);\n            }));\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getLastError',\n    value: function getLastError() {\n      return _regeneratorRuntime.async(function getLastError$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('getLastError'));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent.err);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getLastErrorObj',\n    value: function getLastErrorObj() {\n      return _regeneratorRuntime.async(function getLastErrorObj$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.getLastError());\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'removeUser',\n    value: function removeUser(username) {\n      return _regeneratorRuntime.async(function removeUser$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.dropUser(username));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getSiblingDb',\n    value: function getSiblingDb(dbName, collections) {\n      var db2;\n      return _regeneratorRuntime.async(function getSiblingDb$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            db2 = new Database(_lodash2['default'].assign({}, this.config, { dbName: dbName }), collections);\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.connect());\n\n          case 3:\n            db2._serverPromise = context$2$0.sent;\n            return context$2$0.abrupt('return', db2);\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'runCommand',\n    value: function runCommand(options) {\n      var self, cmd, server;\n      return _regeneratorRuntime.async(function runCommand$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            self = this;\n\n            if (typeof options === 'string') {\n              cmd = options;\n\n              options = {};\n              options[cmd] = 1;\n            }\n\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(self.connect());\n\n          case 4:\n            server = context$2$0.sent;\n            context$2$0.next = 7;\n            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {\n              server.command(self.config.dbName + '.$cmd', options, function (error, result) {\n                if (error) {\n                  reject(error);\n                } else {\n                  resolve(result.result);\n                }\n              });\n            }));\n\n          case 7:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 8:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'runCommandCursor',\n    value: function runCommandCursor(command, options) {\n      if (!options) {\n        options = {};\n        options[command] = 1;\n      }\n      var ns = '$cmd.' + command;\n      var collection = new _Collection2['default'](this, ns);\n      return new _Cursor2['default'](collection, this.config.dbName + '.' + ns, options);\n    }\n  }, {\n    key: 'stats',\n    value: function stats(scale) {\n      return _regeneratorRuntime.async(function stats$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (scale === undefined) {\n              scale = 1;\n            }\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.runCommand({ dbStats: 1, scale: scale }));\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return _regeneratorRuntime.async(function toString$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            return context$2$0.abrupt('return', this.config.dbName);\n\n          case 1:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }]);\n\n  return Database;\n})();\n\nexports['default'] = Database;\n;\nmodule.exports = exports['default'];\n\n// don't open a connection just to close it again\n\n// sanity check args\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/node_modules/promised-mongo/dist/Collection.js":"'use strict';\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _Object$keys = require('babel-runtime/core-js/object/keys')['default'];\n\nvar _regeneratorRuntime = require('babel-runtime/regenerator')['default'];\n\nvar _Promise = require('babel-runtime/core-js/promise')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _mongodbCore = require('mongodb-core');\n\nvar _mongodbCore2 = _interopRequireDefault(_mongodbCore);\n\nvar _Cursor = require('./Cursor');\n\nvar _Cursor2 = _interopRequireDefault(_Cursor);\n\nvar _AggregationCursor = require('./AggregationCursor');\n\nvar _AggregationCursor2 = _interopRequireDefault(_AggregationCursor);\n\nvar _Bulk = require('./Bulk');\n\nvar _Bulk2 = _interopRequireDefault(_Bulk);\n\nvar _Utils = require('./Utils');\n\nvar Code = _mongodbCore2['default'].BSON.Code;\nvar ObjectID = _mongodbCore2['default'].BSON.ObjectID;\n\nfunction indexName(index) {\n  return _Object$keys(index).map(function (key) {\n    return key + '_' + index[key];\n  }).join('_');\n}\n\nfunction makeQuery(query) {\n  if (typeof query === 'undefined') {\n    return {};\n  } else if (query instanceof ObjectID || typeof query !== 'object') {\n    return { _id: query };\n  } else {\n    return query;\n  }\n}\n\nvar Collection = (function () {\n  function Collection(db, collectionName) {\n    _classCallCheck(this, Collection);\n\n    this.initializeOrderedBulkOp = function () {\n      return new _Bulk2['default'](this, true);\n    };\n\n    this.initializeUnorderedBulkOp = function () {\n      return new _Bulk2['default'](this, false);\n    };\n\n    this.db = db;\n    this.collectionName = collectionName;\n    this.fullCollectionName = db.config.dbName + '.' + collectionName;\n    this.defaultWriteOptions = { writeConcern: db.writeConcern, ordered: true };\n  }\n\n  _createClass(Collection, [{\n    key: 'aggregate',\n    value: function aggregate() {\n      var pipeline,\n          args$2$0 = arguments;\n      return _regeneratorRuntime.async(function aggregate$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            pipeline = Array.prototype.slice.call(args$2$0);\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.runCommand('aggregate', { pipeline: pipeline }));\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent.result);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'aggregateCursor',\n    value: function aggregateCursor() {\n      var pipeline = Array.prototype.slice.call(arguments);\n      return new _Cursor2['default'](this, this.fullCollectionName, {\n        aggregate: this.collectionName,\n        pipeline: pipeline,\n        cursor: { batchSize: 1000 }\n      }, { cursor: { batchSize: 1000 } });\n    }\n  }, {\n    key: 'count',\n    value: function count(query) {\n      return _regeneratorRuntime.async(function count$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.find(query).count());\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'createIndex',\n    value: function createIndex(index, options) {\n      return _regeneratorRuntime.async(function createIndex$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            options = _lodash2['default'].extend({ name: indexName(index), key: index }, options || {});\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.runCommand('createIndexes', { indexes: [options] }));\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'distinct',\n    value: function distinct(key, query) {\n      return _regeneratorRuntime.async(function distinct$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('distinct', { key: key, query: query }));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent.values);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'drop',\n    value: function drop() {\n      return _regeneratorRuntime.async(function drop$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.prev = 0;\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.runCommand('drop'));\n\n          case 3:\n            return context$2$0.abrupt('return', true);\n\n          case 6:\n            context$2$0.prev = 6;\n            context$2$0.t0 = context$2$0['catch'](0);\n\n            if (!(context$2$0.t0.name === 'MongoError' && context$2$0.t0.message === 'ns not found')) {\n              context$2$0.next = 12;\n              break;\n            }\n\n            return context$2$0.abrupt('return', false);\n\n          case 12:\n            throw context$2$0.t0;\n\n          case 13:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this, [[0, 6]]);\n    }\n  }, {\n    key: 'dropIndex',\n    value: function dropIndex(index) {\n      return _regeneratorRuntime.async(function dropIndex$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('dropIndexes', { index: index }));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'dropIndexes',\n    value: function dropIndexes() {\n      return _regeneratorRuntime.async(function dropIndexes$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('dropIndexes', { index: '*' }));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'ensureIndex',\n    value: function ensureIndex(index, options) {\n      return _regeneratorRuntime.async(function ensureIndex$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.createIndex(index, options));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'find',\n    value: function find(query, projection, options) {\n      query = makeQuery(query);\n      projection = projection || null;\n\n      options = _lodash2['default'].extend({\n        find: this.collectionName,\n        query: query,\n        fields: projection\n      }, options || {});\n\n      return new _Cursor2['default'](this, this.fullCollectionName, options);\n    }\n  }, {\n    key: 'findAndModify',\n    value: function findAndModify(options) {\n      var result;\n      return _regeneratorRuntime.async(function findAndModify$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('findAndModify', options));\n\n          case 2:\n            result = context$2$0.sent;\n\n            if (!result.lastErrorObject) {\n              result.lastErrorObject = { n: 0 };\n            }\n            return context$2$0.abrupt('return', result);\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'findOne',\n    value: function findOne(query, projection) {\n      var cursor, result;\n      return _regeneratorRuntime.async(function findOne$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            query = makeQuery(query);\n            cursor = this.find(query, projection).limit(1);\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(cursor.next());\n\n          case 4:\n            result = context$2$0.sent;\n            return context$2$0.abrupt('return', result);\n\n          case 6:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getIndexes',\n    value: function getIndexes() {\n      var ns;\n      return _regeneratorRuntime.async(function getIndexes$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            ns = this.db.config.dbName + '.system.indexes';\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(new _Cursor2['default'](this, ns, {\n              find: ns,\n              query: { ns: this.fullCollectionName },\n              projection: {}\n            }).toArray());\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'group',\n    value: function group(doc) {\n      var cmd;\n      return _regeneratorRuntime.async(function group$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            cmd = {\n              group: {\n                ns: this.collectionName,\n                key: doc.key,\n                initial: doc.initial,\n                $reduce: new Code(doc.reduce.toString()),\n                out: 'inline',\n                cond: doc.cond\n              }\n            };\n\n            if (doc.finalize) {\n              cmd.group.finalize = new Code(doc.finalize.toString());\n            }\n            if (doc.keys) {\n              cmd.group.$keyf = new Code(doc.keys.toString());\n            }\n\n            context$2$0.next = 5;\n            return _regeneratorRuntime.awrap(this.db.runCommand(cmd));\n\n          case 5:\n            return context$2$0.abrupt('return', context$2$0.sent.retval);\n\n          case 6:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'insert',\n    value: function insert(docs) {\n      var self, docList, i, server;\n      return _regeneratorRuntime.async(function insert$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            self = this;\n            docList = docs;\n\n            if (!Array.isArray(docs)) {\n              docList = [docs];\n            }\n\n            for (i = 0; i < docList.length; ++i) {\n              if (!docList[i]._id) {\n                docList[i]._id = ObjectID.createPk();\n              }\n            }\n\n            context$2$0.next = 6;\n            return _regeneratorRuntime.awrap(self.db.connect());\n\n          case 6:\n            server = context$2$0.sent;\n            context$2$0.next = 9;\n            return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {\n              server.insert(self.fullCollectionName, docList, self.defaultWriteOptions, function (error, result) {\n                if (error) {\n                  reject(error);\n                } else if (result.result.code) {\n                  reject((0, _Utils.toError)(result.result));\n                } else if (result.result.writeErrors) {\n                  reject((0, _Utils.toError)(result.result.writeErrors[0]));\n                } else {\n                  resolve(docs);\n                }\n              });\n            }));\n\n          case 9:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 10:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'isCapped',\n    value: function isCapped() {\n      var ns, result;\n      return _regeneratorRuntime.async(function isCapped$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            ns = this.db.config.dbName + '.system.namespaces';\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(new _Cursor2['default'](this, ns, {\n              find: ns,\n              query: { name: this.fullCollectionName },\n              projection: {}\n            }).toArray());\n\n          case 3:\n            result = context$2$0.sent;\n            return context$2$0.abrupt('return', !!(result[0].options && result[0].options.capped));\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'mapReduce',\n    value: function mapReduce(map, reduce, options) {\n      return _regeneratorRuntime.async(function mapReduce$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            options = options || {};\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.runCommand('mapReduce', {\n              map: map.toString(),\n              reduce: reduce.toString(),\n              query: options.query || {},\n              out: options.out\n            }));\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'reIndex',\n    value: function reIndex() {\n      return _regeneratorRuntime.async(function reIndex$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('reIndex'));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'remove',\n    value: function remove(query, justOne) {\n      var self,\n          server,\n          args$2$0 = arguments;\n      return _regeneratorRuntime.async(function remove$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            query = makeQuery(query);\n\n            if (args$2$0.length === 0) {\n              query = {};\n            }\n            if (args$2$0.length < 2) {\n              justOne = false;\n            }\n\n            self = this;\n            context$2$0.next = 6;\n            return _regeneratorRuntime.awrap(self.db.connect());\n\n          case 6:\n            server = context$2$0.sent;\n            context$2$0.next = 9;\n            return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {\n              server.remove(self.fullCollectionName, [{ q: query, limit: justOne ? 1 : 0 }], self.defaultWriteOptions, function (error, result) {\n                if (error) {\n                  reject(error);\n                } else {\n                  resolve(result.result);\n                }\n              });\n            }));\n\n          case 9:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 10:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'runCommand',\n    value: function runCommand(command, options) {\n      var temp;\n      return _regeneratorRuntime.async(function runCommand$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            temp = {};\n\n            temp[command] = this.collectionName;\n            options = _lodash2['default'].extend(temp, options || {});\n            context$2$0.next = 5;\n            return _regeneratorRuntime.awrap(this.db.runCommand(options));\n\n          case 5:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 6:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'save',\n    value: function save(doc) {\n      return _regeneratorRuntime.async(function save$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (!doc._id) {\n              context$2$0.next = 6;\n              break;\n            }\n\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.update({ _id: doc._id }, doc, { upsert: true }));\n\n          case 3:\n            return context$2$0.abrupt('return', doc);\n\n          case 6:\n            context$2$0.next = 8;\n            return _regeneratorRuntime.awrap(this.insert(doc));\n\n          case 8:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 9:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'stats',\n    value: function stats() {\n      return _regeneratorRuntime.async(function stats$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.runCommand('collStats'));\n\n          case 2:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 3:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'toString',\n    value: function toString() {\n      return this.collectionName;\n    }\n  }, {\n    key: 'update',\n    value: function update(query, _update, options) {\n      var self, server;\n      return _regeneratorRuntime.async(function update$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            query = makeQuery(query);\n\n            self = this;\n\n            if (!options) {\n              options = {};\n            }\n\n            context$2$0.next = 5;\n            return _regeneratorRuntime.awrap(self.db.connect());\n\n          case 5:\n            server = context$2$0.sent;\n            context$2$0.next = 8;\n            return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {\n              options = _lodash2['default'].extend({ q: query, u: _update }, options);\n              server.update(self.fullCollectionName, [options], self.defaultWriteOptions, function (error, result) {\n                if (error) {\n                  reject(error);\n                } else if (result.result.code) {\n                  reject((0, _Utils.toError)(result.result));\n                } else if (result.result.writeErrors) {\n                  reject((0, _Utils.toError)(result.result.writeErrors[0]));\n                } else {\n                  result = result.result;\n                  // backwards compatibility\n                  if (!result.updatedExisting && result.nModified === result.n) {\n                    result.updatedExisting = true;\n                  }\n                  resolve(result);\n                }\n              });\n            }));\n\n          case 8:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 9:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }]);\n\n  return Collection;\n})();\n\nexports['default'] = Collection;\n;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/node_modules/promised-mongo/dist/Cursor.js":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _get = require('babel-runtime/helpers/get')['default'];\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _regeneratorRuntime = require('babel-runtime/regenerator')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _readableStream = require('readable-stream');\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar Cursor = (function (_Readable) {\n  function Cursor(collection, namespace, command, options) {\n    _classCallCheck(this, Cursor);\n\n    _get(Object.getPrototypeOf(Cursor.prototype), 'constructor', this).call(this, { objectMode: true, highWaterMark: 0 });\n    this.db = collection.db;\n    this.collection = collection;\n    this.namespace = namespace;\n    this.command = command;\n    this.options = options;\n  }\n\n  _inherits(Cursor, _Readable);\n\n  _createClass(Cursor, [{\n    key: 'batchSize',\n    value: function batchSize(n) {\n      this.command.batchSize = n;\n      return this;\n    }\n  }, {\n    key: 'connect',\n    value: function connect() {\n      return _regeneratorRuntime.async(function connect$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (this._cursor) {\n              context$2$0.next = 4;\n              break;\n            }\n\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.db.connect());\n\n          case 3:\n            this._cursor = context$2$0.sent.cursor(this.namespace, this.command, this.options);\n\n          case 4:\n            return context$2$0.abrupt('return', this._cursor);\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'count',\n    value: function count() {\n      var result;\n      return _regeneratorRuntime.async(function count$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.collection.runCommand('count', { query: this.command.query }));\n\n          case 2:\n            result = context$2$0.sent;\n            return context$2$0.abrupt('return', result.n);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      return _regeneratorRuntime.async(function destroy$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (this.cursor) {\n              cursor.close();\n            }\n\n          case 1:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'explain',\n    value: function explain() {\n      return _regeneratorRuntime.async(function explain$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            this.command.query = { $query: this.command.query || {}, $explain: 1 };\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 3:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'forEach',\n    value: function forEach(action) {\n      var item;\n      return _regeneratorRuntime.async(function forEach$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            item = null;\n\n          case 1:\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 3:\n            if (!(item = context$2$0.sent)) {\n              context$2$0.next = 7;\n              break;\n            }\n\n            action(item);\n            context$2$0.next = 1;\n            break;\n\n          case 7:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'forEachAsync',\n    value: function forEachAsync(action) {\n      var item;\n      return _regeneratorRuntime.async(function forEachAsync$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            item = null;\n\n          case 1:\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 3:\n            if (!(item = context$2$0.sent)) {\n              context$2$0.next = 8;\n              break;\n            }\n\n            context$2$0.next = 6;\n            return _regeneratorRuntime.awrap(action(item));\n\n          case 6:\n            context$2$0.next = 1;\n            break;\n\n          case 8:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'limit',\n    value: function limit(n) {\n      this.command.limit = n;\n      return this;\n    }\n  }, {\n    key: 'map',\n    value: function map(mapFunction) {\n      var result, item;\n      return _regeneratorRuntime.async(function map$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            result = [];\n            item = null;\n\n          case 2:\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 4:\n            if (!(item = context$2$0.sent)) {\n              context$2$0.next = 8;\n              break;\n            }\n\n            result.push(mapFunction(item));\n            context$2$0.next = 2;\n            break;\n\n          case 8:\n            return context$2$0.abrupt('return', result);\n\n          case 9:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      var cursor;\n      return _regeneratorRuntime.async(function next$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.connect());\n\n          case 2:\n            cursor = context$2$0.sent;\n            context$2$0.next = 5;\n            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {\n              cursor.next(function (error, result) {\n                if (error) {\n                  reject(error);\n                } else {\n                  resolve(result);\n                }\n              });\n            }));\n\n          case 5:\n            return context$2$0.abrupt('return', context$2$0.sent);\n\n          case 6:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'rewind',\n    value: function rewind() {\n      var cursor;\n      return _regeneratorRuntime.async(function rewind$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return _regeneratorRuntime.awrap(this.connect());\n\n          case 2:\n            cursor = context$2$0.sent;\n\n            cursor.rewind();\n\n          case 4:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'size',\n    value: function size() {\n      var options, result;\n      return _regeneratorRuntime.async(function size$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            options = _lodash2['default'].pick(this.command, ['query', 'limit', 'skip']);\n            context$2$0.next = 3;\n            return _regeneratorRuntime.awrap(this.collection.runCommand('count', options));\n\n          case 3:\n            result = context$2$0.sent;\n            return context$2$0.abrupt('return', result.n);\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'skip',\n    value: function skip(n) {\n      this.command.skip = n;\n      return this;\n    }\n  }, {\n    key: 'sort',\n    value: function sort(sortObject) {\n      this.command.sort = sortObject;\n      return this;\n    }\n  }, {\n    key: 'then',\n    value: function then() {\n      // allows awaiting collection.find() directly.\n      var promise = this.toArray();\n      return promise.then.apply(promise, Array.prototype.slice.call(arguments));\n    }\n  }, {\n    key: 'toArray',\n    value: function toArray() {\n      var result, item;\n      return _regeneratorRuntime.async(function toArray$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            result = [];\n            item = null;\n\n          case 2:\n            context$2$0.next = 4;\n            return _regeneratorRuntime.awrap(this.next());\n\n          case 4:\n            if (!(item = context$2$0.sent)) {\n              context$2$0.next = 8;\n              break;\n            }\n\n            result.push(item);\n            context$2$0.next = 2;\n            break;\n\n          case 8:\n            return context$2$0.abrupt('return', result);\n\n          case 9:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: '_read',\n    value: function _read() {\n      var self = this;\n      self.next().then(function (data) {\n        self.push(data);\n      }, function (error) {\n        self.emit('error', error);\n      });\n    }\n  }]);\n\n  return Cursor;\n})(_readableStream.Readable);\n\nexports['default'] = Cursor;\n;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/node_modules/promised-mongo/dist/AggregationCursor.js":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _get = require('babel-runtime/helpers/get')['default'];\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _regeneratorRuntime = require('babel-runtime/regenerator')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _CursorJs = require('./Cursor.js');\n\nvar _CursorJs2 = _interopRequireDefault(_CursorJs);\n\nvar AggregationCursor = (function (_Cursor) {\n  function AggregationCursor(collection, config) {\n    _classCallCheck(this, AggregationCursor);\n\n    _get(Object.getPrototypeOf(AggregationCursor.prototype), 'constructor', this).call(this, collection, config);\n  }\n\n  _inherits(AggregationCursor, _Cursor);\n\n  _createClass(AggregationCursor, [{\n    key: 'connect',\n    value: function connect() {\n      return _regeneratorRuntime.async(function connect$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }]);\n\n  return AggregationCursor;\n})(_CursorJs2['default']);\n\nexports['default'] = AggregationCursor;\n;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/node_modules/promised-mongo/dist/Bulk.js":"'use strict';\n\nvar _createClass = require('babel-runtime/helpers/create-class')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _regeneratorRuntime = require('babel-runtime/regenerator')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _mongodbCore = require('mongodb-core');\n\nvar _mongodbCore2 = _interopRequireDefault(_mongodbCore);\n\nvar Bulk = (function () {\n  function Bulk(collection, ordered) {\n    _classCallCheck(this, Bulk);\n\n    this.collection = collection;\n    this.ordered = ordered;\n    this._currentCommand = null;\n    this._commands = [];\n  }\n\n  _createClass(Bulk, [{\n    key: 'execute',\n    value: function execute() {\n      var self, result, i, cmd, cmdResult;\n      return _regeneratorRuntime.async(function execute$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            self = this;\n            result = {\n              writeErrors: [],\n              writeConcernErrors: [],\n              nInserted: 0,\n              nUpdated: 0,\n              nMatched: 0,\n              nModified: 0,\n              nRemoved: 0,\n              upserted: []\n            };\n\n            self._commands.push(self._currentCommand);\n\n            i = 0;\n\n          case 4:\n            if (!(i < self._commands.length)) {\n              context$2$0.next = 13;\n              break;\n            }\n\n            cmd = self._commands[i];\n            context$2$0.next = 8;\n            return _regeneratorRuntime.awrap(self.collection.db.runCommand(cmd));\n\n          case 8:\n            cmdResult = context$2$0.sent;\n\n            if (cmd.update) {\n              result.nUpdated += cmdResult.result.n;\n            } else if (cmd.insert) {\n              result.nInserted += cmdResult.result.n;\n            } else if (cmd['delete']) {\n              result.nRemoved += cmdResult.result.n;\n            }\n\n          case 10:\n            ++i;\n            context$2$0.next = 4;\n            break;\n\n          case 13:\n\n            result.ok = 1;\n            return context$2$0.abrupt('return', result);\n\n          case 15:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'find',\n    value: function find(query) {\n      var findObject, self, remove, update;\n      return _regeneratorRuntime.async(function find$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            findObject = {};\n            self = this;\n\n            remove = function remove(limit) {\n              if (!self._currentCommand) {\n                self._currentCommand = {\n                  'delete': self.collection.collectionName,\n                  deletes: [],\n                  ordered: self.ordered,\n                  writeConcern: { w: 1 }\n                };\n              } else if (!self._currentCommand['delete']) {\n                self._commands.push(self._currentCommand);\n                self._currentCommand = {\n                  'delete': self.collection.collectionName,\n                  deletes: [],\n                  ordered: self.ordered,\n                  writeConcern: { w: 1 }\n                };\n              }\n              self._currentCommand.deletes.push({ q: query, limit: limit });\n            };\n\n            update = function update(updateObject, multiple) {\n              if (!self._currentCommand) {\n                self._currentCommand = {\n                  update: self.collection.collectionName,\n                  updates: [],\n                  ordered: self.ordered,\n                  writeConcern: { w: 1 }\n                };\n              } else if (!self._currentCommand.update) {\n                self._commands.push(self._currentCommand);\n                self._currentCommand = {\n                  update: self.collection.collectionName,\n                  updates: [],\n                  ordered: self.ordered,\n                  writeConcern: { w: 1 }\n                };\n              }\n              self._currentCommand.updates.push({ q: query, u: updateObject, multi: mulitple, upsert: false });\n            };\n\n            findObject.remove = function () {\n              remove(0);\n            };\n            findObject.removeOne = function () {\n              remove(1);\n            };\n            findObject.update = function (updateObject) {\n              update(updateObject, true);\n            };\n            findObject.updateOne = function (updateObject) {\n              update(updateObject, false);\n            };\n\n            return context$2$0.abrupt('return', findObject);\n\n          case 9:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'insert',\n    value: function insert(doc) {\n      var self = this;\n\n      if (!self._currentCommand) {\n        self._currentCommand = {\n          insert: self.collection.collectionName,\n          documents: [],\n          ordered: self.ordered,\n          writeConcern: { w: 1 }\n        };\n      } else if (!self._currentCommand.insert) {\n        self._commands.push(self._currentCommand);\n        self._currentCommand = {\n          insert: self.collection.collectionName,\n          documents: [],\n          ordered: self.ordered,\n          writeConcern: { w: 1 }\n        };\n      }\n\n      if (!doc._id) {\n        doc._id = _mongodbCore2['default'].BSON.ObjectID.createPk();\n      }\n      this._currentCommand.documents.push(doc);\n    }\n  }, {\n    key: 'tojson',\n    value: function tojson() {\n      var result = {\n        nInsertOps: 0,\n        nUpdateOps: 0,\n        nRemoveOps: 0,\n        nBatches: this._commands.length\n      };\n\n      this._commands.forEach(function (cmd) {\n        if (cmd.update) {\n          result.nUpdateOps += cmd.updates.length;\n        } else if (cmd.insert) {\n          result.nInsertOps += cmd.documents.length;\n        } else if (cmd['delete']) {\n          result.nRemoveOps += cmd.deletes.length;\n        }\n      });\n\n      return result;\n    }\n  }]);\n\n  return Bulk;\n})();\n\nexports['default'] = Bulk;\n;\nmodule.exports = exports['default'];\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/node_modules/promised-mongo/dist/Utils.js":"'use strict';\n\nvar _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];\n\nvar _Object$keys = require('babel-runtime/core-js/object/keys')['default'];\n\n_Object$defineProperty(exports, '__esModule', {\n  value: true\n});\n\nexports.toError = toError;\n\nvar _mongodbCore = require('mongodb-core');\n\nfunction toError(error) {\n  if (error instanceof Error) {\n    return error;\n  }\n\n  var msg = error.err || error.errmsg || error.errMessage || error;\n  var e = new _mongodbCore.MongoError(msg);\n\n  // Get all object keys\n  var keys = typeof error == 'object' ? _Object$keys(error) : [];\n\n  if (typeof error === 'object') {\n    var _keys = _Object$keys(error);\n\n    for (var i = 0; i < _keys.length; i++) {\n      e[_keys[i]] = error[_keys[i]];\n    }\n  }\n\n  return e;\n}\n\n;\n","/home/travis/build/npmtest/node-npmtest-promised-mongo/node_modules/promised-mongo/Gruntfile.js":"module.exports = function (grunt) {\n  grunt.initConfig({\n    babel: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: 'lib/',\n          src: ['**/*.js'],\n          dest: 'dist/'\n        }]\n      }\n    },\n\n    clean: ['dist']\n  });\n\n  require('load-grunt-tasks')(grunt);\n\n  grunt.registerTask('default', ['clean', 'babel']);\n};\n"}